<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on quantomistro</title>
		<link>https://quantomistro.github.io/posts/</link>
		<description>Recent content in Posts on quantomistro</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Tue, 12 May 2020 02:51:43 +0800</lastBuildDate>
		<atom:link href="https://quantomistro.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Theming With CSS Variables</title>
			<link>https://quantomistro.github.io/posts/theming-with-css-variables/</link>
			<pubDate>Tue, 12 May 2020 02:51:43 +0800</pubDate>
			
			<guid>https://quantomistro.github.io/posts/theming-with-css-variables/</guid>
			<description>A few months ago I thought to myself, &amp;ldquo;I should make a real-time chatting web application&amp;rdquo;. So I added that to my growing list of ongoing projects, and started working on it after convincing a few other friends to join me. I started this project partly because after learning programming for so long, I wanted to give myself a bigger challenge, and test my skills by trying to build a proper (like a proper) application.</description>
			<content type="html"><![CDATA[

<p>A few months ago I thought to myself, &ldquo;I should make a real-time chatting web application&rdquo;. So I added that to my growing list of ongoing projects, and started working on it after convincing a few other friends to join me. I started this project partly because after learning programming for so long, I wanted to give myself a bigger challenge, and test my skills by trying to build a proper (like a <em>proper</em>) application. The rest of it was because I was itching to try out <a href="https://elixir-lang.org">Elixir</a>, the hip new concurrency-based functional programming language that runs on the BEAM VM (might make a post on it sometime). With Elixir comes the excellent web framework <a href="https://www.phoenixframework.org">Phoenix</a>. While trying to figure out my way around Phoenix and its <a href="http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller">MVC pattern</a>, I kept struggling with the layouts and HTML templates and the static js/css assets. I realized how little I knew about front-end web development and design. üôÅ</p>

<p>Now I <em>have</em> done some of the exercises and lessons on freecodecamp, but that was a long time ago and I&rsquo;d forgotten most of it. So I went back to freecodecamp, did a few lessons on HTML and CSS, then tried this website and that blog-post and other tutorials while trying to familiarize myself with latest best practices. And then I stumbled across variables in CSS! <em>Native</em> variables in CSS!</p>

<p>This means we can make our CSS even more DRY. This means more maintainable code. It also makes development and testing easier, and makes it easy to do cool stuff like adding themes to our webpage. Yes, that&rsquo;s what this blog post is about. Finally.</p>

<hr />

<p>For this tutorial, we&rsquo;re going to make a simple sign-up page with a button at the top that let&rsquo;s the user switch from the default light-mode to a dark-mode theme, using CSS variables. First, the html (I&rsquo;m just throwing all of the html here so there&rsquo;s less back and forth between this and the css):</p>
<div class="highlight"><pre class="chroma"><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="p">&lt;</span><span class="nt">html</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Sign up!<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">link</span> <span class="na">rel</span><span class="o">=</span><span class="s">&#34;stylesheet&#34;</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/css&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;./style.css&#34;</span><span class="p">/&gt;</span>
<span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;container&#34;</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;toggle-theme&#34;</span><span class="p">&gt;</span>üåì<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>

        <span class="p">&lt;</span><span class="nt">form</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;border-primary&#34;</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;formheading&#34;</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>üëã Sign up<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
            <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;formdata&#34;</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">input</span> <span class="na">placeholder</span><span class="o">=</span><span class="s">&#34;Username&#34;</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;password&#34;</span> <span class="na">placeholder</span><span class="o">=</span><span class="s">&#34;Password&#34;</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;email&#34;</span> <span class="na">placeholder</span><span class="o">=</span><span class="s">&#34;Email&#34;</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">button</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;border-primary&#34;</span><span class="p">&gt;</span>Sign up<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
            <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">h5</span><span class="p">&gt;</span>Already have an account? <span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;#&#34;</span><span class="p">&gt;</span>Sign in!<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;&lt;/</span><span class="nt">h5</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nt">form</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>

    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;./index.js&#34;</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>

<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span></code></pre></div>
<p>It&rsquo;s basic stuff, we&rsquo;re just defining the layout.</p>

<p>I&rsquo;ve also been learning Flexbox and how to make stuff responsive, so we&rsquo;ll use flex to align our content, and <code>vh</code>/<code>vw</code> for size units in our CSS.</p>

<blockquote>
<p>If you&rsquo;re in a hurry, you can just copy/paste all the css and html given below, and move on to the <a href="#css-variables">CSS Variables</a> section to learn about CSS variables.</p>
</blockquote>

<p>For now, we&rsquo;re just going to start off by adding some basic CSS, so create a <code>style.css</code> file next to your html file:</p>
<div class="highlight"><pre class="chroma"><code class="language-css" data-lang="css"><span class="nt">body</span> <span class="p">{</span>
    <span class="k">margin</span><span class="p">:</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">.</span><span class="nc">container</span> <span class="p">{</span>
    <span class="k">display</span><span class="p">:</span> <span class="kc">flex</span><span class="p">;</span>
    <span class="k">justify-content</span><span class="p">:</span> <span class="kc">center</span><span class="p">;</span>
    <span class="k">align-items</span><span class="p">:</span> <span class="kc">center</span><span class="p">;</span>
    <span class="k">height</span><span class="p">:</span> <span class="mi">100</span><span class="kt">vh</span><span class="p">;</span>
    <span class="k">background-color</span><span class="p">:</span> <span class="kc">white</span><span class="p">;</span>
<span class="p">}</span></code></pre></div>
<p>We use flexbox to center our container both vertically (align-items) and horizontally (justify-content).</p>

<p>After that, we style the form element:</p>
<div class="highlight"><pre class="chroma"><code class="language-css" data-lang="css"><span class="nt">form</span> <span class="p">{</span>
    <span class="k">display</span><span class="p">:</span> <span class="kc">flex</span><span class="p">;</span>
    <span class="k">flex-direction</span><span class="p">:</span> <span class="kc">column</span><span class="p">;</span>
    <span class="k">justify-content</span><span class="p">:</span> <span class="kc">space</span><span class="o">-</span><span class="n">between</span><span class="p">;</span>
    <span class="k">padding</span><span class="p">:</span> <span class="mi">2</span><span class="kt">vh</span> <span class="mi">2</span><span class="kt">vw</span> <span class="mi">4</span><span class="kt">vh</span> <span class="mi">2</span><span class="kt">vw</span><span class="p">;</span>
    <span class="k">min-width</span><span class="p">:</span> <span class="mi">25</span><span class="kt">vw</span><span class="p">;</span>
    <span class="k">min-height</span><span class="p">:</span> <span class="mi">30</span><span class="kt">vh</span><span class="p">;</span>
    <span class="k">border-width</span><span class="p">:</span> <span class="mi">1</span><span class="kt">vh</span><span class="p">;</span>
    <span class="k">border-radius</span><span class="p">:</span> <span class="mi">5</span><span class="kt">vh</span><span class="p">;</span>
<span class="p">}</span></code></pre></div>
<p>Again, we use flexbox to align its contents, set the borders and padding for it, and the min-height and min-width to make sure it resizes properly.</p>

<p>Next, we have the two <code>#formheading</code> and <code>#formdata</code> elements inside our form:</p>
<div class="highlight"><pre class="chroma"><code class="language-css" data-lang="css"><span class="p">#</span><span class="nn">formheading</span> <span class="p">{</span>
    <span class="k">display</span><span class="p">:</span> <span class="kc">flex</span><span class="p">;</span>
    <span class="k">flex-direction</span><span class="p">:</span> <span class="kc">row</span><span class="p">;</span>
    <span class="k">padding-bottom</span><span class="p">:</span> <span class="mi">2</span><span class="kt">vh</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">#</span><span class="nn">formdata</span> <span class="p">{</span>
    <span class="k">display</span><span class="p">:</span> <span class="kc">flex</span><span class="p">;</span>
    <span class="k">flex-direction</span><span class="p">:</span> <span class="kc">column</span><span class="p">;</span>
<span class="p">}</span></code></pre></div>
<p>For the <code>#formheading</code>, the flex-direction is set to row so that any other text elements added will show horizontally. For <code>#formdata</code>, it&rsquo;s set to column so that our input fields show up stacked properly.</p>

<p>Now the input fields:</p>
<div class="highlight"><pre class="chroma"><code class="language-css" data-lang="css"><span class="nt">input</span> <span class="p">{</span>
    <span class="k">padding</span><span class="p">:</span> <span class="mi">1</span><span class="kt">vh</span> <span class="mi">1</span><span class="kt">vw</span><span class="p">;</span>
    <span class="k">margin-bottom</span><span class="p">:</span> <span class="mi">1</span><span class="kt">vh</span><span class="p">;</span>
    <span class="k">font-family</span><span class="p">:</span> <span class="kc">sans-serif</span><span class="p">;</span>
    <span class="k">background-color</span><span class="p">:</span> <span class="kc">transparent</span><span class="p">;</span>
    <span class="k">color</span><span class="p">:</span> <span class="mh">#333</span><span class="p">;</span>
    <span class="k">border-style</span><span class="p">:</span> <span class="kc">solid</span><span class="p">;</span>
    <span class="k">border-width</span><span class="p">:</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mf">0.5</span><span class="kt">vh</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">border-color</span><span class="p">:</span> <span class="kc">lightgrey</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">input</span><span class="p">:</span><span class="nd">focus</span> <span class="p">{</span>
    <span class="k">border-color</span><span class="p">:</span> <span class="kc">lightgreen</span><span class="p">;</span>
<span class="p">}</span></code></pre></div>
<p>We set their padding and borders, and have the border change colors when it&rsquo;s focused.</p>

<p>Next we&rsquo;ll style the button:</p>
<div class="highlight"><pre class="chroma"><code class="language-css" data-lang="css"><span class="nt">button</span> <span class="p">{</span>
    <span class="k">padding</span><span class="p">:</span> <span class="mi">1</span><span class="kt">vh</span> <span class="mi">1</span><span class="kt">vw</span><span class="p">;</span>
    <span class="k">margin-top</span><span class="p">:</span> <span class="mi">2</span><span class="kt">vh</span><span class="p">;</span>
    <span class="k">font-weight</span><span class="p">:</span> <span class="kc">bold</span><span class="p">;</span>
    <span class="k">max-width</span><span class="p">:</span> <span class="mi">30</span><span class="kt">%</span><span class="p">;</span>
    <span class="k">font-family</span><span class="p">:</span> <span class="kc">sans-serif</span><span class="p">;</span>
    <span class="k">color</span><span class="p">:</span> <span class="mh">#333</span><span class="p">;</span>
    <span class="k">background-color</span><span class="p">:</span> <span class="kc">transparent</span><span class="p">;</span>
    <span class="k">border-radius</span><span class="p">:</span> <span class="mf">1.5</span><span class="kt">vh</span><span class="p">;</span>
    <span class="k">cursor</span><span class="p">:</span> <span class="kc">pointer</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">button</span><span class="p">:</span><span class="nd">active</span> <span class="p">{</span>
    <span class="k">background-color</span><span class="p">:</span> <span class="kc">lightgreen</span><span class="p">;</span>
<span class="p">}</span></code></pre></div>
<p>Very similar to the input fields - we style the borders, add some padding, colors, make it change colors when clicked and so on.</p>

<p>If you noticed in the html, our button element and our form element both have a <code>border-primary</code> class too, for styling their borders, so let&rsquo;s do that too:</p>
<div class="highlight"><pre class="chroma"><code class="language-css" data-lang="css"><span class="p">.</span><span class="nc">border-primary</span> <span class="p">{</span>
    <span class="k">border-style</span><span class="p">:</span> <span class="kc">solid</span><span class="p">;</span>
    <span class="k">border-color</span><span class="p">:</span> <span class="kc">lightgreen</span><span class="p">;</span>
<span class="p">}</span></code></pre></div>
<p>Let&rsquo;s also style the text content of our page, and give it some colors:</p>
<div class="highlight"><pre class="chroma"><code class="language-css" data-lang="css"><span class="nt">h2</span><span class="o">,</span>
<span class="nt">h5</span> <span class="p">{</span>
    <span class="k">color</span><span class="p">:</span> <span class="kc">lightgreen</span><span class="p">;</span>
    <span class="k">font-family</span><span class="p">:</span> <span class="kc">sans-serif</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">a</span> <span class="p">{</span>
    <span class="k">color</span><span class="p">:</span> <span class="kc">green</span><span class="p">;</span>
    <span class="k">text-decoration</span><span class="p">:</span> <span class="kc">none</span><span class="p">;</span>
<span class="p">}</span></code></pre></div>
<p>Finally, the CSS for our <code>#toggle-theme</code> button:</p>
<div class="highlight"><pre class="chroma"><code class="language-css" data-lang="css"><span class="p">#</span><span class="nn">toggle-theme</span> <span class="p">{</span>
    <span class="k">position</span><span class="p">:</span> <span class="kc">fixed</span><span class="p">;</span>
    <span class="k">top</span><span class="p">:</span> <span class="mi">1</span><span class="kt">vh</span><span class="p">;</span>
    <span class="k">left</span><span class="p">:</span> <span class="mi">1</span><span class="kt">vw</span><span class="p">;</span>
    <span class="k">font-size</span><span class="p">:</span> <span class="mi">4</span><span class="kt">vh</span><span class="p">;</span>
    <span class="k">cursor</span><span class="p">:</span> <span class="kc">pointer</span><span class="p">;</span>
<span class="p">}</span></code></pre></div>
<p>Alright! That&rsquo;s our HTML and CSS done. Now we can start adding CSS variables and, with a few lines of javascript, we&rsquo;ll be able to click our toggle theme button and switch between light-mode and dark-mode.</p>

<h2 id="css-variables">CSS Variables</h2>

<p>Variables in CSS are, of course, a little different from variables in other <em>programming</em> languages. They&rsquo;re prefixed with two hyphens, like so: <code>--my-variable</code>. The syntax for defining variables is easy enough:</p>
<div class="highlight"><pre class="chroma"><code class="language-css" data-lang="css"><span class="nt">html</span> <span class="p">{</span>
    <span class="nv">--my-variable</span><span class="p">:</span> <span class="n">value</span><span class="p">;</span>
<span class="p">}</span></code></pre></div>
<p>The value can be any standard CSS value, like a font family or size or color and so on.</p>

<p>After defining your variables, you need to use the <code>var()</code> function to access them:</p>
<div class="highlight"><pre class="chroma"><code class="language-css" data-lang="css"><span class="nt">html</span> <span class="p">{</span>
    <span class="n">property</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">my</span><span class="o">-</span><span class="n">variable</span><span class="p">);</span>
<span class="p">}</span></code></pre></div>
<blockquote>
<p>I know, it&rsquo;s pretty funky syntax, especially when you&rsquo;ve got lots of variables in your css (and even more so when you&rsquo;re using variables as fallbacks to variables), but at least the usefulness far outweighs this.</p>
</blockquote>

<p>You&rsquo;ll notice in the first example that the variable has been defined inside the block for the <code>html</code> element. This is important, because, like other programming languages, variables in CSS also have scopes. Variables need to be defined in a certain scope, and then they can be used anywhere within that scope. In the example above, the scope is <code>html</code>, and so <code>--my-variable</code> can be used within that element and all its children as well.</p>

<p>Since you&rsquo;ll often be using the same variables throughout your entire stylesheet, it is common to (<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties">according to MDN</a>) define them on the <code>:root</code> pseudo-class:</p>
<div class="highlight"><pre class="chroma"><code class="language-css" data-lang="css"><span class="p">:</span><span class="nd">root</span> <span class="p">{</span>
    <span class="nv">--font</span><span class="p">:</span> <span class="n">Roboto</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">h1</span> <span class="p">{</span>
    <span class="k">font-family</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">font</span><span class="p">);</span>
<span class="p">}</span></code></pre></div>
<p>The <code>var()</code> function also lets you define fallback values in case something goes wrong with applying the actual value of the variable, which is pretty useful:</p>
<div class="highlight"><pre class="chroma"><code class="language-css" data-lang="css"><span class="p">:</span><span class="nd">root</span> <span class="p">{</span>
    <span class="nv">--font</span><span class="p">:</span> <span class="n">Roboto</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">h1</span> <span class="p">{</span>
    <span class="k">font-family</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">font</span><span class="p">,</span> <span class="kc">sans-serif</span><span class="p">);</span>
<span class="p">}</span>

<span class="nt">h2</span> <span class="p">{</span>
    <span class="k">font-family</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">font</span><span class="p">,</span> <span class="kc">serif</span><span class="p">);</span>
<span class="p">}</span></code></pre></div>
<p>In this example, if the font <code>Roboto</code> isn&rsquo;t available, then it will fall back to the values we&rsquo;ve given - <code>sans-serif</code> for h1, and <code>serif</code> for h2.</p>

<p>Now let&rsquo;s use all this to (finally) start adding the dark-mode theme to our sign up page. First we define some variables on the <code>:root</code> pseudo-class:</p>
<div class="highlight"><pre class="chroma"><code class="language-css" data-lang="css"><span class="p">:</span><span class="nd">root</span> <span class="p">{</span>
    <span class="c">/* Default theme variables */</span>
    <span class="nv">--bg-color</span><span class="p">:</span> <span class="kc">white</span><span class="p">;</span>
    <span class="nv">--inactive-border</span><span class="p">:</span> <span class="kc">lightgrey</span><span class="p">;</span>
    <span class="nv">--font-color</span><span class="p">:</span> <span class="mh">#333</span><span class="p">;</span>

    <span class="nv">--primary-color</span><span class="p">:</span> <span class="kc">lightgreen</span><span class="p">;</span>
    <span class="nv">--secondary-color</span><span class="p">:</span> <span class="kc">green</span><span class="p">;</span>
    <span class="nv">--primary-font</span><span class="p">:</span> <span class="n">Roboto</span><span class="p">;</span>
    <span class="nv">--secondary-font</span><span class="p">:</span> <span class="n">Roboto</span><span class="p">;</span>
<span class="p">}</span></code></pre></div>
<p>Using this, we&rsquo;ve defined the variables for our &ldquo;default&rdquo; theme - light-mode in this case. Aside from the default theme variables, I also decided to define variables for the primary, secondary colors and fonts on our page. This is also really useful because it lets you easily test different color schemes and see which ones work, or even create multiple color schemes for different themes.</p>

<p>Now that we&rsquo;ve defined our variables for the default theme, we need to apply these variables throughout our stylesheet. Replace all the <code>lightgreen</code>s with <code>var(--primary-color)</code>, all the <code>green</code>s with <code>var(--secondary-color)</code>, and so on. If you&rsquo;re a lazy programmer, you can use your editor&rsquo;s Find and Replace function to do this quickly for all the variables we&rsquo;ve defined, or if you&rsquo;re a hard-working programmer, you can do it one by one for each rule.</p>

<p>Once that&rsquo;s done, open the html page in your browser to make sure it looks the same as before. If it does, good job, the variables work properly. If it doesn&rsquo;t, then you&rsquo;ve probably made some typo that needs to be fixed.</p>

<h2 id="adding-the-dark-mode">Adding the dark-mode</h2>

<p>The way our dark-mode will work is that our variable definitions for dark-mode colors will go inside the scope of the <code>.dark-mode</code> class. This way, when we add the <code>dark-mode</code> class to our page container, all the elements using the &ldquo;default&rdquo; light-mode values from variables defined in the <code>:root</code> scope will switch to the values defined in the <code>.dark-mode</code> scope.</p>

<p>Here&rsquo;s the CSS for that:</p>
<div class="highlight"><pre class="chroma"><code class="language-css" data-lang="css"><span class="c">/* Dark theme variables */</span>
<span class="p">.</span><span class="nc">dark-mode</span> <span class="p">{</span>
    <span class="nv">--bg-color</span><span class="p">:</span> <span class="mh">#333</span><span class="p">;</span>
    <span class="nv">--inactive-border</span><span class="p">:</span> <span class="kc">darkgrey</span><span class="p">;</span>
    <span class="nv">--font-color</span><span class="p">:</span> <span class="mh">#ddd</span><span class="p">;</span>
<span class="p">}</span></code></pre></div>
<p>If you go back to your html and add the <code>.dark-mode</code> class to the container div and open the page in your browser, you should be able to see the page in our newly-defined dark-mode theme. Cool!</p>

<p>The last thing left now is the javascript that allows us to toggle the theme with the button on the top-left corner. Here&rsquo;s the js for that:</p>
<div class="highlight"><pre class="chroma"><code class="language-js" data-lang="js"><span class="k">const</span> <span class="nx">themeBtn</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s2">&#34;#toggle-theme&#34;</span><span class="p">);</span>

<span class="nx">themeBtn</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&#34;click&#34;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="nx">body</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">toggle</span><span class="p">(</span><span class="s2">&#34;dark-mode&#34;</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div>
<p>It&rsquo;s pretty simple: we select the toggle-theme button, and add a listener for the click event which toggles the dark-mode theme from its classList. Open up the page in your browser again and test it out!</p>

<p>The full code for this is on codepen.io:
<a href="https://codepen.io/quantomistro/pen/RwWpEmO">https://codepen.io/quantomistro/pen/RwWpEmO</a></p>

<h1 id="toc_2">üëã</h1>
]]></content>
		</item>
		
		<item>
			<title>GUI With JavaFX (2)</title>
			<link>https://quantomistro.github.io/posts/gui-with-javafx-2/</link>
			<pubDate>Fri, 24 Apr 2020 20:43:38 +0800</pubDate>
			
			<guid>https://quantomistro.github.io/posts/gui-with-javafx-2/</guid>
			<description>This is part 2 of my tutorial on making a GUI application with JavaFX. Part 1 was mostly about setting up the project and using the Scenebuilder to create our interface. In this part, we&amp;rsquo;re going to create a controller for our scene and use it to connect our application logic with the UI.
Right now, this is what my ./src directory looks like:
src/ ‚îú‚îÄ main/ ‚îÇ ‚îú‚îÄ java/ ‚îÇ ‚îÇ ‚îî‚îÄ App.</description>
			<content type="html"><![CDATA[

<p>This is part 2 of my tutorial on making a GUI application with JavaFX. <a href="/posts/gui-with-javafx-1">Part 1</a> was mostly about setting up the project and using the Scenebuilder to create our interface. In this part, we&rsquo;re going to create a controller for our scene and use it to connect our application logic with the UI.</p>

<p>Right now, this is what my <code>./src</code> directory looks like:</p>

<pre><code>src/
‚îú‚îÄ main/
‚îÇ   ‚îú‚îÄ java/
‚îÇ   ‚îÇ   ‚îî‚îÄ App.java
‚îÇ   ‚îî‚îÄ resources/
‚îÇ       ‚îî‚îÄ Login.fxml
‚îî‚îÄ test/
    ‚îú‚îÄ java/
    ‚îÇ   ‚îî‚îÄ AppTest.java
    ‚îî‚îÄ resources/

</code></pre>

<p>Open up the <code>App.java</code> file, and slap this code in:</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">project</span><span class="o">;</span> <span class="c1">// 1
</span><span class="c1"></span>
<span class="kn">import</span> <span class="nn">javafx.application.Application</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javafx.scene.Scene</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javafx.stage.Stage</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javafx.fxml.FXMLLoader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javafx.scene.Parent</span><span class="o">;</span>

<span class="c1">// 2
</span><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">App</span> <span class="kd">extends</span> <span class="n">Application</span> <span class="o">{</span>
    
    <span class="c1">// 3
</span><span class="c1"></span>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">launch</span><span class="o">(</span><span class="n">args</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="c1">// 4
</span><span class="c1"></span>    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">(</span><span class="n">Stage</span> <span class="n">stage</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>        
        
        <span class="c1">// 5
</span><span class="c1"></span>        <span class="n">FXMLLoader</span> <span class="n">loader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FXMLLoader</span><span class="o">();</span>
        <span class="n">loader</span><span class="o">.</span><span class="na">setLocation</span><span class="o">(</span><span class="n">getClass</span><span class="o">().</span><span class="na">getResource</span><span class="o">(</span><span class="s">&#34;/Login.fxml&#34;</span><span class="o">));</span>
        <span class="n">Parent</span> <span class="n">content</span> <span class="o">=</span> <span class="n">loader</span><span class="o">.</span><span class="na">load</span><span class="o">();</span>

        <span class="c1">// 6
</span><span class="c1"></span>        <span class="n">Scene</span> <span class="n">scene</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scene</span><span class="o">(</span><span class="n">content</span><span class="o">);</span>
        <span class="n">stage</span><span class="o">.</span><span class="na">setScene</span><span class="o">(</span><span class="n">scene</span><span class="o">);</span>
        <span class="n">stage</span><span class="o">.</span><span class="na">show</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></div>
<p>I&rsquo;ll quickly go over the code:</p>

<ol>
<li>Package declaration (the name, of course, will be whatever you chose) followed by our imports.</li>
<li>Our App class must extend <code>javafx.application.Application</code>.</li>
<li>Our main method will call the launch method from <code>Application</code>, which then handles initializing and executing our code.</li>
<li>We override the start method from <code>Application</code>, which takes a <code>Stage</code> argument. This Stage is going to be the &ldquo;main&rdquo; window of our application.</li>
<li>We use the <code>FXMLLoader</code> class to load our Login.fxml file so that we can display its contents. Note the path given to the <code>getResource</code> method in this bit: <code>getClass().getResource(&quot;/Login.fxml&quot;)</code>. The slash at the beginning is important! It determines how and where JavaFX will look for our fxml file. I made a mistake here and spent a lot of time trying to fix it, so be careful!</li>
<li>We take the contents we loaded in the last step, wrap them inside a <code>Scene</code>, set that scene onto our stage, and use <code>stage.show()</code> to finally display our GUI.</li>
</ol>

<p>Now, use <code>./gradlew run</code> to compile and execute the program. If everything went well, you should see the window we built using the Scenebuilder. Nice.</p>

<p><img src="/images/gui-with-javafx-2/LoginForm.png" alt="Login Form" /></p>

<blockquote>
<p>Note: Depending on the version of Java you are using, you might see warnings like this in your console:
<code>WARNING: Loading FXML document with JavaFX API of version 11.0.1 by JavaFX runtime of version 8.0.211</code>.
It can probably be solved by updating Java or something, but even without that, everything so far has been
working as expected, at least for me.</p>
</blockquote>

<p>Try typing in the input fields. Pretty nice, no? Now try pressing the Cancel and Submit buttons. Pretty neat, right? No, not neat. They don&rsquo;t do anything. Pressing cancel doesn&rsquo;t cancel it, and pressing submit doesn&rsquo;t submit it. Let&rsquo;s add a Controller and make that happen, then!</p>

<h2 id="controllers">Controllers</h2>

<p>As I mentioned in the last post, Controllers are basically Java classes that can connect to our GUI and actually make stuff happen. It&rsquo;s best to try it out and see for yourself.</p>

<p>Go ahead and create a new java file alongside <code>App.java</code>. I&rsquo;ve named mine <code>LoginController.java</code>. Here&rsquo;s the code for it:</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">project</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javafx.fxml.FXML</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javafx.scene.control.Button</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javafx.scene.control.TextField</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javafx.application.Platform</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LoginController</span> <span class="o">{</span>

    <span class="nd">@FXML</span> <span class="kd">private</span> <span class="n">Button</span> <span class="n">cancelBtn</span><span class="o">;</span>
    <span class="nd">@FXML</span> <span class="kd">private</span> <span class="n">Button</span> <span class="n">submitBtn</span><span class="o">;</span>
    <span class="nd">@FXML</span> <span class="kd">private</span> <span class="n">TextField</span> <span class="n">usernameField</span><span class="o">;</span>
    <span class="nd">@FXML</span> <span class="kd">private</span> <span class="n">TextField</span> <span class="n">passwordField</span><span class="o">;</span>

    <span class="nd">@FXML</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">handleCancelBtnAction</span><span class="o">()</span> <span class="o">{</span>

    <span class="o">}</span>

    <span class="nd">@FXML</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">handleSubmitBtnAction</span><span class="o">()</span> <span class="o">{</span>

    <span class="o">}</span>

<span class="o">}</span></code></pre></div>
<p>Note that our controller class does not need to extend or implement anything. You&rsquo;ll also notice that the bodies for our two methods are empty - that&rsquo;s because before we do that, we need to go back to our Login.fxml file in the Scenebuilder and assign IDs to the elements we&rsquo;re going to be needing access to in these methods. These IDs must match the names of the four fields we&rsquo;ve declared in our controller - <code>cancelBtn</code>, <code>submitBtn</code>, <code>usernameField</code> and <code>passwordField</code>. JavaFX will then bind these to the corresponding elements in our GUI, allowing us to easily and directly access them when needed.</p>

<p>So go ahead and open up the fxml file in the Scenebuilder again. First, in the left sidebar, open up the &ldquo;Controller&rdquo; tab at the bottom. Then in the controller class field, write down the (full) name of our controller class. For me, it&rsquo;s <code>project.LoginController</code>. Then, select the TextField next to the &ldquo;Username: &ldquo; label, and in the right sidebar, open the Code tab at the bottom. The first field is its id. Enter &ldquo;usernameField&rdquo; into it. Make sure it matches the name of the field in our Controller class. Do the same for the password field, and the cancel and submit buttons.</p>

<p><img src="/images/gui-with-javafx-2/UsernameFieldId.png" alt="Username Field ID" /></p>

<p>With that, we&rsquo;ve attached our controller class and its fields with the corresponding components in our GUI. Next, we need to implement the methods in the controller class, and attach them to the GUI as well. Here&rsquo;s the body for those methods:</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java">    <span class="nd">@FXML</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">handleCancelBtnAction</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">Platform</span><span class="o">.</span><span class="na">exit</span><span class="o">();</span>
        <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="n">0</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@FXML</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">handleSubmitBtnAction</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">user</span> <span class="o">=</span> <span class="n">usernameField</span><span class="o">.</span><span class="na">getText</span><span class="o">();</span>
        <span class="n">String</span> <span class="n">pass</span> <span class="o">=</span> <span class="n">passwordField</span><span class="o">.</span><span class="na">getText</span><span class="o">();</span>

        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Username: &#34;</span> <span class="o">+</span> <span class="n">user</span><span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Password: &#34;</span> <span class="o">+</span> <span class="n">pass</span><span class="o">);</span>

        <span class="n">usernameField</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
        <span class="n">passwordField</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
    <span class="o">}</span></code></pre></div>
<p>For the <code>cancelBtn</code> action, I just decided to have it close and exit the program. For <code>submitBtn</code>, I&rsquo;m going to have it simply print the username and password to the console, and then clear both fields.</p>

<blockquote>
<p>Of course, I realize now that passwords are supposed to be hidden and we&rsquo;re not supposed to treat them like this, but this is just an example so shhh!</p>
</blockquote>

<p>Now that we&rsquo;ve implemented the methods, we need to attach them to the GUI. The two actions we&rsquo;re going to implement occur with our two buttons, Submit and Cancel, so that&rsquo;s where we&rsquo;ll attach these methods. Open the Scenebuilder, select the Cancel button, open the Code tab, and scroll down to &ldquo;Mouse&rdquo; section. There, in the &ldquo;On Mouse Clicked&rdquo; field, enter the name of our method: <code>handleCancelBtnAction</code>. Do the same for the Submit button, and enter the name <code>handleSubmitBtnAction</code> for it.</p>

<p><img src="/images/gui-with-javafx-2/SubmitButtonAction.png" alt="Submit Button Action" /></p>

<p>That&rsquo;s it! If everything went well, you should see the Login form when you run <code>./gradlew run</code>, the app should close when you click the Cancel button, and when you click the Submit button, it should print out the contents of the two text fields, and then clear them (note: if you&rsquo;re using Gradle, the console might not show anything until you exit the program. I don&rsquo;t know why that happens, but there&rsquo;s probably a way to configure Gradle and fix that).</p>

<p>That&rsquo;s it for the tutorial as well! I&rsquo;m also still learning how to use JavaFX, but I hope this&rsquo;ll prove useful to other beginners like me!</p>

<h1 id="toc_1">üëã</h1>
]]></content>
		</item>
		
		<item>
			<title>GUI With JavaFX (1)</title>
			<link>https://quantomistro.github.io/posts/gui-with-javafx-1/</link>
			<pubDate>Sun, 12 Apr 2020 18:00:47 +0800</pubDate>
			
			<guid>https://quantomistro.github.io/posts/gui-with-javafx-1/</guid>
			<description>For International Baccalaureate (IB) students, around 20% of their grade (i think?) depends on their Internal Assessments (IAs) in each course. Each course has its own requirements for the IA. For Computer Science students, the IA is basically finding a &amp;ldquo;client&amp;rdquo; with problem X and then building a program to solve that problem for them - an exercise in software development. Now at any given time, I usually have a list of cool ideas and programs I want to build someday to make the world a happier place - but none of them were risk-free enough for an assignment that would account for 20% of my final grade.</description>
			<content type="html"><![CDATA[

<p>For International Baccalaureate (IB) students, around 20% of their grade (i think?) depends on their Internal Assessments (IAs) in each course. Each course has its own requirements for the IA. For Computer Science students, the IA is basically finding a &ldquo;client&rdquo; with problem X and then building a program to solve that problem for them - an exercise in software development. Now at any given time, I usually have a list of cool ideas and programs I want to build someday to make the world a happier place - but none of them were risk-free enough for an assignment that would account for 20% of my final grade. So I decided to go with the flow and do something similar to what my fellow classmates were doing - a basic CRUD program in Java, using a MySQL database, hooked to a GUI built with Swing.</p>

<p>Except, that&rsquo;s not exactly what I did - I&rsquo;ve already tried (and failed üôÅ) on multiple occasions to build a native GUI application, so I&rsquo;ve already looked at some of the options available out there for building GUIs. I&rsquo;d heard of both Swing and JavaFX, and had been told that JavaFX is Swing&rsquo;s successor. So I decided to use JavaFX instead. The program itself (for my IA) is far from finished, and there&rsquo;s still lots that I don&rsquo;t understand about JavaFX - but, slowly yet surely, I&rsquo;m getting the hang of it. This post is going to be part-tutorial and part-me-talking-about-what-I-achieved trying to use JavaFX.</p>

<h2 id="setup">Setup</h2>

<p>Here&rsquo;s what I&rsquo;m using for my development:</p>

<ul>
<li>Java 8 (up to 11 should also be fine, I think)</li>
<li>Visual Studio Code</li>
<li>Gradle (v5.6.2)</li>
<li>Gluon SceneBuilder</li>
</ul>

<p>You should probably already have Java installed, if you&rsquo;re reading this article. I prefer to use VSCode for most of my development, so I won&rsquo;t be using Eclipse or IntelliJ. If you use either of those, you probably won&rsquo;t need a build tool like Gradle. Gluon SceneBuilder is a GUI app for, well, building the scenes (or the interfaces) for our JavaFX application. It&rsquo;ll make life easier for us. You can install it <a href="https://gluonhq.com/products/scene-builder/">here</a>. If you also decided to use Gradle, you can find out how to install it from <a href="https://gradle.org/install/">here</a>.</p>

<h2 id="creating-a-gradle-project">Creating a Gradle project</h2>

<blockquote>
<p>If you&rsquo;re using an IDE like Eclipse or IntelliJ, you can skip the Gradle-specific parts.</p>
</blockquote>

<p>Create a directory for your project, <code>cd</code> into it and run <code>gradle init</code>. It&rsquo;ll ask you stuff about your project:</p>

<pre><code>PS E:\_\source\quantomistro\_misc\project&gt; gradle init
Select type of project to generate:
  1: basic
  2: application
  3: library
  4: Gradle plugin
Enter selection (default: basic) [1..4] 2

Select implementation language:
  1: C++
  2: Groovy
  3: Java
  4: Kotlin
  5: Swift
Enter selection (default: Java) [1..5] 3

Select build script DSL:
  1: Groovy
  2: Kotlin
Enter selection (default: Groovy) [1..2] 1

Select test framework:
  1: JUnit 4
  2: TestNG
  3: Spock
  4: JUnit Jupiter
Enter selection (default: JUnit 4) [1..4] 1
Enter Project name (default: project): project
Enter source package (default: project): project

</code></pre>

<p>The type of project will be &lsquo;application&rsquo; - option 2. This will generate some useful gradle tasks for us. The implementation language is, obviously, java. The build script DSL I&rsquo;m using is Groovy - if you have no idea what this is for, then you should probably choose groovy as well because it&rsquo;s not very relevant here. The test framework isn&rsquo;t very relevant either, because tests don&rsquo;t matter (obviously joking - they just don&rsquo;t matter <em>right now</em>. Please make sure you write proper tests for all your code!).</p>

<p>It&rsquo;ll also ask for your project name and source package. The defaults should be fine.</p>

<p>Once that&rsquo;s done, it&rsquo;ll generate a few files and sub-directories:</p>

<pre><code>project/
‚îú‚îÄ .gradle/
‚îÇ   ‚îî‚îÄ (... gradle stuff)
‚îú‚îÄ gradle/
‚îÇ   ‚îî‚îÄ (... more gradle stuff)
‚îú‚îÄ src/
‚îÇ   ‚îú‚îÄ main/
‚îÇ   ‚îÇ   ‚îú‚îÄ java/
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ App.java
‚îÇ   ‚îÇ   ‚îî‚îÄ resources/
‚îÇ   ‚îî‚îÄ test/
‚îÇ       ‚îú‚îÄ java/
‚îÇ       ‚îÇ   ‚îî‚îÄ AppTest.java
‚îÇ       ‚îî‚îÄ resources/
‚îú‚îÄ .gitignore
‚îú‚îÄ build.gradle
‚îú‚îÄ gradlew
‚îú‚îÄ gradlew.bat
‚îî‚îÄ settings.gradle

</code></pre>

<p>There&rsquo;s build files and settings files and some other directories gradle uses, but we mostly won&rsquo;t need to concern ourselves with those. We&rsquo;ll be working in the <code>src/main</code> directory most of the time.</p>

<h2 id="using-the-scenebuilder">Using the SceneBuilder</h2>

<p>Now is probably a good time to introduce JavaFX&rsquo;s idea of &lsquo;stages&rsquo; and &lsquo;scenes&rsquo; - a &lsquo;stage&rsquo;, as far as I understand, represents a &lsquo;window&rsquo;, on top of which you have &lsquo;scenes&rsquo; which describe your interface. You can use the SceneBuilder to create and edit these scenes. The SceneBuilder will then output .fxml files (XML that describes the interface, similar to HTML) for these scenes, and you can then use Java to load these scenes into your JavaFX stage, to be displayed to the user. We&rsquo;ll get to that part later on. Right now, we&rsquo;re going to create a simple scene for ourselves using the SceneBuilder.</p>

<p>Fire up the SceneBuilder, and choose &lsquo;New Project&rsquo;. You&rsquo;ll see a few options you can start with - empty, basic and complex for desktop, and then empty and basic for mobile. For now, just go ahead and choose the empty option at the beginning.</p>

<p><img src="/images/gui-with-javafx-1/Layout_Options.png" alt="Scenebuilder Project Options" /></p>

<p>You should see two sidebars on your left and right, and then your GUI in the middle. On the left sidebar, under &lsquo;Library&rsquo;, you&rsquo;ll see lots and lots of the components that JavaFX provides for you to build your interface. This includes stuff like input fields, labels, buttons, panes, and so on. There&rsquo;s also a handy search bar for these at the top. After that, under &lsquo;Document&rsquo; you&rsquo;ll see your hierarchy - basically, how your GUI components are structured in the underlying FXML. There&rsquo;s also a &lsquo;Controller&rsquo; tab below that - this is for our Java code associated with this scene. Usually, you&rsquo;ll have a controller for each scene. This helps us nicely organize our UI and logic.</p>

<p><img src="/images/gui-with-javafx-1/Left_Sidebar.png" alt="Left Sidebar" /></p>

<p>Then, on the right sidebar, you have the &lsquo;Inspector&rsquo; tab, which will show you the properties, layout and associated code for the selected component.</p>

<p><img src="/images/gui-with-javafx-1/Right_Sidebar.png" alt="Right Sidebar" /></p>

<h2 id="a-simple-login-form">A simple login form</h2>

<p>For this example, we&rsquo;ll build a very very simple login form. Go to the Library, look for &lsquo;VBox&rsquo;, and drag it to the center. It should also show up in your hierarchy on the left sidebar.</p>

<p><img src="/images/gui-with-javafx-1/Select_VBox.png" alt="Select VBox" /></p>

<p>One cool thing about JavaFX is that, aside from being able to use FXML to describe your interface, it also allows us to use CSS to style our elements. The Scenebuilder allows us to easily add, edit and remove the CSS rules for our elements. Let&rsquo;s try that out by giving our form a dark theme.</p>

<p>First, select the VBox element we just added to the hierarchy. You should see all its properties in the right sidebar. Go to the &lsquo;JavaFX CSS&rsquo; section, and click the input field under &lsquo;Style&rsquo;. Select <code>-fx-background-color</code> from the drop-down menu that pops up (if it doesn&rsquo;t, just type it in). Then on the right, enter the value for this property. I went with <code>#333333</code>. You should see the GUI in the middle update as well.</p>

<p><img src="/images/gui-with-javafx-1/Set_Bg_Color.png" alt="Set Background Color" /></p>

<p>Next, go to the library and look for &lsquo;HBox&rsquo;, and add it to your hierarchy. By now, you should be wondering what &lsquo;HBox&rsquo; and &lsquo;VBox&rsquo; are. I&rsquo;m pretty sure the V and H stand for vertical and horizontal, and they&rsquo;re both really really useful for aligning stuff in your interface. In this example, we used &lsquo;VBox&rsquo; at the root because all our elements are going to be stacked vertically in the form. Each element in this &lsquo;stack&rsquo; is going to be wrapped inside an &lsquo;HBox&rsquo; element, which will easily let us handle the horizontal alignment for that element.</p>

<p>Right now, our hierarchy contains just one VBox, and an HBox inside that. Go look for a &lsquo;Label&rsquo; in the library and add it under the &lsquo;HBox&rsquo;. Select the newly added label, go to its properties and change the text content to &lsquo;Login&rsquo;, the font size to 56, the text fill to white, and choose a font family for it (I&rsquo;m using Consolas). Then, select the HBox element that the label is wrapped inside, and set its &lsquo;Alignment&rsquo; property to &lsquo;CENTER&rsquo;.</p>

<p><img src="/images/gui-with-javafx-1/HBox_Alignment.png" alt="HBox Alignment" /></p>

<p>This should center the &lsquo;Login&rsquo; text horizontally. While we&rsquo;re at it, why don&rsquo;t we properly align our VBox element as well: select the VBox at the root, go to properties and set its alignment to &lsquo;CENTER&rsquo; as well.</p>

<p>Now you&rsquo;ll notice we have a lot of empty space at the top and bottom. Let&rsquo;s fix that: select the VBox, go to &lsquo;Layout&rsquo; on the right sidebar, scroll down to the &lsquo;Size&rsquo; section, and set the &lsquo;Pref Width&rsquo; and &lsquo;Pref Height&rsquo; properties to &lsquo;USE_COMPUTED_SIZE&rsquo;. This way, its height and width will be set to however much is needed by the elements nested inside it.</p>

<p><img src="/images/gui-with-javafx-1/VBox_Layout.png" alt="VBox Layout" /></p>

<p>Enough about that, let&rsquo;s move on with our form. Add another HBox element under VBox. Set its alignment to &lsquo;CENTER&rsquo; as well. Then, add a Label element and a TextField element inside it. Set the Label content to &lsquo;Username: &lsquo;, change its color to white, and choose an appropriate font size and family. Then, select the label and go to &lsquo;Layout&rsquo; on the right sidebar. In the &lsquo;VBox Constraints&rsquo; section at the top, you&rsquo;ll see a &lsquo;Margin&rsquo; property. Edit the values to set the distance between the label and the TextField. Then, go to hierarchy, open the context menu for the HBox and duplicate it for a &lsquo;Password&rsquo; field (change the text content of the second label to &lsquo;Password: &lsquo;). Set the margins as appropriate. After that, add another HBox element, and then two Button elements under that. Set the HBox alignment to &lsquo;CENTER_RIGHT&rsquo; this time. Change the content of one Button to &lsquo;Cancel&rsquo; and the other to &lsquo;Submit&rsquo;. Again, set the margins for the buttons as appropriate.</p>

<p>Here&rsquo;s what mine looks like:
<img src="/images/gui-with-javafx-1/Final_Interface.png" alt="Final interface" /></p>

<p>That&rsquo;s it for our interface! The toolbar at the top has an option to preview the window (or use the shortcut Ctrl+P). Now, save the file into the <code>./src/main/resources</code> directory as &lsquo;Login.fxml&rsquo;. The <code>src/main/resources</code> directory is where we&rsquo;ll be storing the .fxml file(s) for our program.</p>

<p>This turned out to be longer than I had expected, so I&rsquo;m just gonna split this into two parts. In the next part, we&rsquo;ll get to setting up a controller for our scene, and using it to glue together our application logic with the interface.</p>

<h1 id="toc_4">üëã</h1>
]]></content>
		</item>
		
		<item>
			<title>Starting a blog</title>
			<link>https://quantomistro.github.io/posts/starting-a-blog/</link>
			<pubDate>Mon, 15 Jul 2019 00:38:43 +0800</pubDate>
			
			<guid>https://quantomistro.github.io/posts/starting-a-blog/</guid>
			<description>Sometime during 2018 I had the very original idea of starting my own blog. So, I started one, and then forgot about it, and now I&amp;rsquo;ve started another one. Thankfully, my previous experience had taught me just how hard it can be to think of new ideas for blog posts, which is why I came prepared this time.
For my first blog post, I&amp;rsquo;ll be talking about how I set up this blog.</description>
			<content type="html"><![CDATA[

<p>Sometime during 2018 I had the very original idea of starting my own blog. So, I started one, and then forgot about it, and now I&rsquo;ve started another one. Thankfully, my previous experience had taught me just how hard it can be to think of new ideas for blog posts, which is why I came prepared this time.</p>

<h3 id="for-my-first-blog-post-i-ll-be-talking-about-how-i-set-up-this-blog">For my first blog post, I&rsquo;ll be talking about how I set up this blog.</h3>

<p>My <em>first</em> blog was made with <a href="https://wordpress.com">WordPress</a>. It wasn&rsquo;t the most pleasant experience for me. Don&rsquo;t get me wrong, WP has its benefits. A simple interface, plenty of themes, and lots of other bells and whistles for your blogging site. But WP didn&rsquo;t seem right to me. It&rsquo;s very easy to get carried away with all those plugins, themes, stats and whatnot. Oftentimes it also felt rather slow and limiting. All I wanted was a place to put my opinions, quickly and easily, without sacrificing too much flexibility or control.</p>

<h3 id="enter-github-pages">Enter GitHub Pages</h3>

<p>Around that time I was also getting myself familiar with <a href="https://github.com">GitHub</a> so that I could show off my spaghetti code to the rest of the world. That&rsquo;s when I found out about <a href="https://pages.github.com/">GitHub Pages</a>, a static site hosting service. Not having to mess with databases and being able to edit my site locally sounded cool, so I decided to give blogging another try, using GitHub Pages this time.</p>

<h3 id="static-site-generators">Static site generators</h3>

<p>Static site generators are just that: programs to generate your static site for you, ready to be published to your hosting service. There are several good ones out there, with <a href="https://jekyllrb.com/">Jekyll</a> being the one that sticks out most. It&rsquo;s popular and recommended by GitHub Pages, and I&rsquo;m sure it&rsquo;s nice and all but it&rsquo;s built on Ruby and I didn&rsquo;t feel like installing Ruby on my machine so I decided to use <a href="https://blog.getpelican.com/">Pelican</a> instead, which is built on Python (which I had already installed). I was admittedly a bit confused at first, but managed to pull together a nice-looking static site after going through some good tutorials like <a href="https://fedoramagazine.org/make-github-pages-blog-with-pelican/">this one</a> and <a href="https://www.fullstackpython.com/blog/generating-static-websites-pelican-jinja2-markdown.html">this one</a>.</p>

<p>Everything was nice for a few days until I wanted to change my theme and get a better one. You can find lots of themes for pelican <a href="http://pelicanthemes.com/">here</a>, but none of them clicked for me, so I decided to switch to <a href="https://gohugo.io">Hugo</a> after hearing good things about it from a friend. Hugo&rsquo;s praise was well-deserved. It comes as a standalone binary, is extremely fast and configurable, and has a ton of pretty themes you can browse over <a href="https://themes.gohugo.io">here</a>. I went through plenty of them and picked out <a href="https://themes.gohugo.io/hermit/">hermit</a> as my favorite, which is the current theme for this blog (as of the writing of this post).</p>

<p>You can learn how to set up your blog using Hugo <a href="https://blog.appernetic.io/2016/04/09/how-to-set-up-a-static-hugo-website-on-github-pages-in-2-minutes/">over here</a>, and you can learn more about using GitHub Pages <a href="https://guides.github.com/features/pages/">over here</a>. Here&rsquo;s another handy link if you feel like <a href="https://www.smashingmagazine.com/2019/05/switch-wordpress-hugo/">switching from WordPress to Hugo</a>!</p>

<p>(I&rsquo;m not being paid by Hugo or anything, I just really like using it)</p>

<h1 id="toc_3">üëã</h1>
]]></content>
		</item>
		
	</channel>
</rss>
